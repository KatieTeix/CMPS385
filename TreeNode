#include <iostream>

using namespace std;

struct Treenode {
    int data;
    Treenode* left;
    Treenode* right;

    Treenode(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Insert function for building the BST
Treenode* insert(Treenode* root, int val) {
    if (root == nullptr)
        return new Treenode(val);
    if (val < root->data)
        root->left = insert(root->left, val);
    else if (val > root->data)
        root->right = insert(root->right, val);
    return root;
}

// Left Rotation
Treenode* leftrotation(Treenode* root) {
    if (root == nullptr || root->right == nullptr)
        return root;

    Treenode* newRoot = root->right;
    Treenode* T2 = newRoot->left;

    newRoot->left = root;
    root->right = T2;

    return newRoot;
}

// Right Rotation
Treenode* rightrotation(Treenode* root) {
    if (root == nullptr || root->left == nullptr)
        return root;

    Treenode* newRoot = root->left;
    Treenode* T2 = newRoot->right;

    newRoot->right = root;
    root->left = T2;

    return newRoot;
}

// Find node by value and apply left rotation
Treenode* leftrotation(int val, Treenode* root) {
    if (root == nullptr) return nullptr;
    if (val < root->data) {
        root->left = leftrotation(val, root->left);
    } else if (val > root->data) {
        root->right = leftrotation(val, root->right);
    } else {
        return leftrotation(root);  // Found the node to rotate
    }
    return root;
}

// Find node by value and apply right rotation
Treenode* rightrotation(int val, Treenode* root) {
    if (root == nullptr) return nullptr;
    if (val < root->data) {
        root->left = rightrotation(val, root->left);
    } else if (val > root->data) {
        root->right = rightrotation(val, root->right);
    } else {
        return rightrotation(root);  // Found the node to rotate
    }
    return root;
}

// In-order traversal to display tree contents
void inorder(Treenode* root) {
    if (root == nullptr) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Example usage
int main() {
    Treenode* root = nullptr;

    // Create a sample tree
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 10);
    root = insert(root, 25);
    root = insert(root, 35);
    root = insert(root, 50);

    cout << "Original in-order traversal:\n";
    inorder(root);
    cout << "\n";

    // Apply left rotation at node 30
    root = leftrotation(30, root);

    cout << "After left rotation at 30:\n";
    inorder(root);
    cout << "\n";

    // Apply right rotation at node 40
    root = rightrotation(40, root);

    cout << "After right rotation at 40:\n";
    inorder(root);
    cout << "\n";

    return 0;
}
